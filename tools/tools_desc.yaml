linear_tools:
  - category: "ACTION: tools that enable TMAI Agent to act on behalf of employees on Linear. These must be used with caution after having gathered all the necessary information from the user's request or Linear data. Most importantly the required inputs must be clearly identified."
    tools:
      - name: createIssue
        description: GraphQL-based function to create a new issue in Linear with specified details
        inputs:
          team_key: "The team key where the issue will be created (enum: ENG, OPS, RES, AI, MKT, PRO)"
          title: "Title of the issue"
          description: "Markdown description of the issue (always try to enhance or groom the description before creating the issue. As detailed as possible)"
          priority: "Priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "Estimate points for the issue (1-7)"
          assignee_name: "Display name of the user to assign the issue to"
          state_name: "Name of the workflow state (e.g. 'Todo', 'In Progress', 'Done')"
          label_names: "List of label names to apply to the issue"
          project_name: "Name of the project to add the issue to"
          cycle_number: "Number of the cycle to add the issue to (must always be the current cycle of the correct team)"
          parent_issue_number: "Issue number of the parent issue"
        outputs: Created issue details
        required_inputs:
          - team_key
          - title

      - name: updateIssue
        description: "GraphQL-based function to update an existing issue in Linear. This should only be executed after having detected which specific issue (and the issue number) is going to be updated with the context gathered. Whatever you do, must filter and get the exact content exists in the issue before updating it."
        inputs:
          team_key: "The team key to update the issue in (enum: ENG, OPS, RES, AI, MKT, PRO)"
          issue_number: "The number of the issue to update"
          title: "New title for the issue. If not changed, must repeat the old title. Do not leave it blank."
          description: "New markdown description for the issue. If not changed, must repeat the old description. Always try to groom the description carefully if the user requests."
          priority: "New priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "New estimate points (1-7)"
          assignee_name: "Display name of the user to reassign to"
          state_name: "New workflow state name (e.g. 'Todo', 'In Progress', 'Done')"
          label_names: "New list of label names (search for labels using the getAllLabels function)"
          project_name: "Name of the project to move the issue to"
          cycle_number: "Number of the cycle to move the issue to (must always be the current cycle of the correct team)"
          parent_issue_number: "Issue number of the new parent issue"
          archived: "Whether to archive the issue"
        outputs: Updated issue details
        required_inputs:
          - issue_number
          - team_key

      - name: createComment
        description: "GraphQL-based function to create a new comment on an issue. This should only be executed after having detected which specific issue (and the issue number) is going to be commented on with the context gathered. Whatever you do, must filter and get the exact content exists in the issue before commenting on it."
        inputs:
          issueNumber: "The number of the issue to comment on"
          commentData: "The comment data to create"
          teamKey: "The team key to comment on (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: Created comment details
        required_inputs:
          - commentData
          - issueNumber
          - teamKey

  - category: "EXPLORE: Low-effort functions that are used to explore how data on Linear looks like. You can just randomly fill in the inputs in the enum fields to see what data you can get. Always prioritize to use functions inside this section first before using the other sections."
    tools:
      - name: getAllUsers
        description: GraphQL-based function to get all users in a specified Linear team
        inputs:
          team_key: "The team key to get users from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of user objects with metadata"
        required_inputs:
          - team_key

      - name: getCurrentUser
        description: Get information about a specific user on Linear (their team key, their username) by their Slack display name
        inputs:
          slack_display_name: "The Slack display name of the user to look up (e.g. '@username')"
        outputs: "User object with real name and team information. A user only belongs to one team."
        required_inputs:
          - slack_display_name

      - name: getAllCycles
        description: "GraphQL-based function to get all cycles up to the current cycle in a specified Linear team. The largest cycle number is the current cycle and the rest are past cycles in chronological order. Note: each team has different cycle numbers, make sure to use the correct team key for whatever the user's request is."
        inputs:
          team_key: "The team key to get cycles from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of cycle objects with metadata"
        required_inputs:
          - team_key

      - name: getAllLabels
        description: GraphQL-based function to get all labels in a specified Linear team
        inputs:
          team_key: "The team key to get labels from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of label objects with metadata"
        required_inputs:
          - team_key

      - name: getAllStates
        description: GraphQL-based function to get all workflow states in a specified Linear team
        inputs:
          team_key: "The team key to get workflow states from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of workflow state objects with metadata"
        required_inputs:
          - team_key

      - name: getAllTeams
        description: GraphQL-based function to get all teams in Linear
        inputs: None
        outputs: "Array of team objects with metadata"
        required_inputs: None

  - category: "FILTER: High-effort functions used to filter and select better results but comes at a cost of more required inputs. Always try to gather as much data as you can before using these functions."
    tools:
      - name: filterIssues
        description: GraphQL-based function to filter Linear issues based on various criteria such as state, priority, assignee, etc.
        inputs:
          team_key: "The team key to filter issues by (enum: ENG, OPS, RES, AI, MKT, PRO)"
          issue_number: "Filter by specific issue number. Note: Issue numbers are only unique within a team, so it's recommended to use with teamKey."
          state: "Filter by issue state (e.g. 'In Progress', 'Todo', 'Done')"
          priority: "Filter by priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "Filter by estimate points (1-7) hours."
          assignee_name: "Filter by assignee's display name (exact match)."
          assignee_contains: "Filter by assignee names containing this text (case-insensitive)"
          title_contains: "Filter issues where title contains this string"
          description_contains: "Filter issues where description contains this string"
          cycle_number: "Filter by cycle number (numeric identifier)"
          project_id: "Filter by project ID"
          label_name: "Filter by label name"
          first: "Limit the number of issues returned. Determine a reasonable number of this to satisfy the user's request."
          include_description: "Whether to include the description field in the results. Set to False most of the time. Just set the True if users request details about the issue."
        outputs: "Array of matching issues with metadata"
        required_inputs:
          - team_key

      - name: filterComments
        description: GraphQL-based function to filter comments in Linear based on various criteria
        inputs:
          issue_number: "Filter comments by issue number"
          user_display_name: "Filter comments by user display name"
          body_contains: "Filter comments where body contains this text"
        outputs: "Array of matching comments"
        required_inputs:
          - issue_number

      - name: filterProjects
        description: GraphQL-based function to filter projects in Linear based on various criteria
        inputs:
          team_key: "Filter projects by team key (enum: ENG, OPS, RES, AI, MKT, PRO)"
          name: "Exact match for project name"
          name_contains: "Filter projects where name contains this string (case-sensitive)"
          state: "Filter by project state (e.g. 'planned', 'started', 'completed')"
          lead_display_name: "Filter by project lead's display name"
        outputs: "Array of matching project objects"
        required_inputs: []

      - name: semantic_search_linear
        description: "IMPORTANT: Only use this for natural language concept searches (e.g., 'database migration issues' or 'UI improvements'). DO NOT use for finding specific issues by ID, number, or exact name - use filterIssues instead. This function finds Linear content semantically similar to concepts described in natural language, searching across titles and descriptions of issues, projects, and comments."
        inputs:
          limit: "Maximum number of results to return"
          use_reranker: "Whether to apply LLM-based reranking to improve search results"
          candidate_pool_size: "Size of the initial candidate pool for reranking"
          team_key: "Filter results by team key (enum: ENG, OPS, RES, AI, MKT, PRO)"
          object_type: "Filter results by object type (enum: Issue, Project, Comment)"
        outputs: "Array of semantically relevant Linear objects with metadata"
        required_inputs:
          - query

posthog_tools:
  - category: "EXPLORE: Low-effort functions that are used to explore analytics data in PostHog. Use these functions first to get a basic understanding of available dashboards and metrics."
    tools:
      - name: get_dashboards
        description: Get a list of all dashboards in the PostHog project. Use this to discover what analytics dashboards are available.
        inputs: None
        outputs: "Array of dashboard objects with basic metadata including ID, name, and description"
        required_inputs: None

  - category: "HIGH EFFORT: Advanced analytics functions for retrieving detailed data. Use these after you have identified the specific dashboards or insights you need data from."
    tools:
      - name: get_insight_data
        description: Get data for a specific insight/chart. Use this when you need the raw data behind a specific visualization.
        inputs:
          insight_id: "The ID of the insight to get data for"
          days: "Number of days of data to retrieve (default: 7, recommended values: 7, 14, 30, 90)"
        outputs: "Detailed insight data including time series and metrics"
        required_inputs:
          - insight_id

      - name: get_dashboard_data
        description: Get all data for a dashboard including all insights. Use this for a comprehensive view of all metrics in a dashboard.
        inputs:
          dashboard_name: "The name of the dashboard to get data for (e.g., 'Marketing Dashboard', 'Product Dashboard')"
          days: "Number of days of data to retrieve (default: 7, recommended values: 7, 14, 30, 90)"
        outputs: "Complete dashboard data with all insights and metrics"
        required_inputs:
          - dashboard_name

      - name: get_dashboard_by_name
        description: Find a dashboard by its name. Use this when you know the exact name of the dashboard you want to retrieve.
        inputs:
          name: "The name of the dashboard to find (e.g., 'Marketing Dashboard', 'Product Dashboard')"
        outputs: "Dashboard object with metadata"
        required_inputs:
          - name

      - name: get_dashboard_by_id
        description: Get a dashboard by its ID. Use this when you have the specific dashboard ID from a previous query.
        inputs:
          dashboard_id: "The ID of the dashboard to get"
        outputs: "Dashboard object with detailed metadata"
        required_inputs:
          - dashboard_id
          
      - name: get_dashboard_screenshot
        description: Get a screenshot of a dashboard as a PNG image and optionally upload it to Slack. If upload_to_slack is true, the image will be posted in the current conversation or specified Slack channel.
        inputs:
          dashboard_id: "The ID of the dashboard to screenshot"
        outputs: "If upload_to_slack is true, returns Slack upload details including URL. Otherwise, binary PNG image data or path to saved file."
        required_inputs:
          - dashboard_id
          
      - name: get_insight_screenshot
        description: Get a screenshot of a specific insight/chart as a PNG image and optionally upload it to Slack. If upload_to_slack is true, the image will be posted in the current conversation or specified Slack channel.
        inputs:
          insight_id: "The ID of the insight to screenshot"
        outputs: "If upload_to_slack is true, returns Slack upload details including URL. Otherwise, binary PNG image data or path to saved file."
        required_inputs:
          - insight_id

slack_tools:
  - category: "Slack communication tools"
    tools:
      - name: get_conversation_context
        description: Get the conversation context for the current chat session. Use this function to return the full conversation history of the current chat session, in case you want to refer to previous messages for important information as the history context you get at the beginning is just a truncated version. Limit by the number of messages you want to retrieve.
        inputs:
          max_messages: "Maximum number of messages to retrieve from the conversation history. Default is 10. Use a larger number (e.g., 20-30) for longer context, or a smaller number (e.g., 5) for just recent messages."
        outputs: "Array of formatted message strings"
        required_inputs:
          - max_messages

      - name: search_channel_history
        description: Search Slack channel history with specific filters to find relevant messages
        inputs:
          channel_id: "The ID of the Slack channel to search (e.g., 'C01234ABCDE')"
          username: "Filter messages by a specific username"
          time_range: "Time unit to look back (enum: hours, days, weeks)"
          time_value: "Number of time units to look back"
          message_count: "Maximum number of messages to retrieve"
        outputs: "Array of matching messages with metadata including content type detection"
        required_inputs:
          - channel_id

      - name: get_user
        description: "Get user information for every employee in the company or a specific employee. By providing their display name, you can get the user's information. Or return all users if no display name is provided."
        inputs:
          display_name: "The display name of the employee to search for (e.g. '@username')"
        outputs: "Array of Slack user objects with metadata"
        required_inputs: []

website_tools:
  - category: "Website content search tools. Used for searching data about Token Metrics and its products."
    tools:
      - name: search_website_content
        description: Search the website for content based on a natural language query. Or by specific website type.
        inputs:
          query: "The query to search the chunked website content inside a RAG database storing website content."
          website_type: "The type of website to search (enum: main, research, blog)"
          distinct_on_url: "Whether to search for distinct content across multiple sites of Token Metrics, by default it will prioritize the most relevant content  (or closest) to the query, but this flag set to True helps you search more general information about the website across many sites of Token Metrics. And maybe sometimes at the expense of relevance. So set this to False if you prioritize relevance over general information."
          return_full_content: "Whether to return the full content of the website which contains the chunk. This helps when you want more granular information about a specific website. So as a rule of thumb, only use this in combination with distinct_on_url set to True."
          limit: "The maximum number of results to return"
        outputs: "Array of matching website content objects with metadata"
        required_inputs:
          - None

gdrive_tools:
  - category: "Google Drive content search tools. Used for searching data about Token Metrics and its products."
    tools:
      - name: search_drive_files
        description: Search Google Drive for files matching a natural language query.
        inputs:
          query: "The query to search the Google Drive for files"
          limit: "The maximum number of results to return"
        outputs: "Array of matching file objects with metadata"
        required_inputs:
          - query
          - limit

      - name: get_drive_file_content
        description: Retrieve the full text content of a Google Drive file by its file ID. Everytime you call it, it only returns the content of a single file. You can call it multiple times to get the content of multiple files.
        inputs:
          file_id: "The ID of the file to retrieve content from"
        outputs: "The full text content of the file"
        required_inputs:
          - file_id