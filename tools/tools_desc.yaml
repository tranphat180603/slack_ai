linear_tools:
  - category: "ACTION: tools that enable TMAI Agent to act on behalf of employees on Linear. These must be used with caution after having gathered all the necessary information from the user's request or Linear data. Most importantly the required inputs must be clearly identified."
    tools:
      - name: createIssue
        description: GraphQL-based function to create a new issue in Linear with specified details
        inputs:
          team_key: "The team key where the issue will be created (enum: ENG, OPS, RES, AI, MKT, PRO)"
          title: "Title of the issue"
          description: "Markdown description of the issue (always try to enhance or groom the description before creating the issue. As detailed as possible)"
          priority: "Priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "Estimate points for the issue (1-7)"
          assignee_name: "Display name of the user to assign the issue to"
          state_name: "Name of the workflow state (e.g. 'Todo', 'In Progress', 'Done')"
          label_names: "List of label names to apply to the issue"
          project_name: "Name of the project to add the issue to"
          cycle_name: "Name of the cycle to add the issue to (must always be the current cycle of the correct team)"
          parent_issue_number: "Issue number of the parent issue"
        outputs: Created issue details
        required_inputs:
          - team_key
          - title

      - name: updateIssue
        description: "GraphQL-based function to update an existing issue in Linear. This should only be executed after having detected which specific issue (and the issue number) is going to be updated with the context gathered. Whatever you do, must filter and get the exact content exists in the issue before updating it."
        inputs:
          issue_number: "The number of the issue to update"
          title: "New title for the issue. If not changed, must repeat the old title. Do not leave it blank."
          description: "New markdown description for the issue. If not changed, must repeat the old description. Always try to groom the description carefully if the user requests."
          priority: "New priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "New estimate points (1-7)"
          assignee_name: "Display name of the user to reassign to"
          state_name: "New workflow state name (e.g. 'Todo', 'In Progress', 'Done')"
          label_names: "New list of label names (search for labels using the getAllLabels function)"
          project_name: "Name of the project to move the issue to"
          cycle_name: "Name of the cycle to move the issue to (must always be the current cycle of the correct team)"
          parent_issue_number: "Issue number of the new parent issue"
          archived: "Whether to archive the issue"
        outputs: Updated issue details
        required_inputs:
          - issue_number

      - name: createComment
        description: "GraphQL-based function to create a new comment on an issue. This should only be executed after having detected which specific issue (and the issue number) is going to be commented on with the context gathered. Whatever you do, must filter and get the exact content exists in the issue before commenting on it."
        inputs:
          issueNumber: "The number of the issue to comment on"
          commentData: "The comment data to create"
          teamKey: "The team key to comment on (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: Created comment details
        required_inputs:
          - commentData
          - issueNumber
          - teamKey

  - category: "EXPLORE: Low-effort functions that are used to explore how data on Linear looks like. You can just randomly fill in the inputs in the enum fields to see what data you can get. Always prioritize to use functions inside this section first before using the other sections."
    tools:
      - name: getUserMessageByNumber
        description: Retrieves the N most recent user messages from the current conversation thread. This is useful when you need to get the precise wording of recent messages, especially for long texts or when creating issues/tickets.
        inputs:
          number: "The number of most recent user messages to retrieve (e.g., 5 means retrieve the 5 most recent user messages)"
        outputs: "List of strings containing the exact content of the requested number of user messages"
        required_inputs:
          - number

      - name: getAllUsers
        description: GraphQL-based function to get all users in a specified Linear team
        inputs:
          team_key: "The team key to get users from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of user objects with metadata"
        required_inputs:
          - team_key

      - name: getCurrentUser
        description: Get information about a specific user on Linear (their team key, their username) by their Slack display name
        inputs:
          slack_display_name: "The Slack display name of the user to look up (e.g. '@username')"
        outputs: "User object with real name and team information"
        required_inputs:
          - slack_display_name

      - name: getAllCycles
        description: "GraphQL-based function to get all cycles up to the current cycle in a specified Linear team. The largest cycle number is the current cycle and the rest are past cycles in chronological order. Note: each team has different cycle numbers, make sure to use the correct team key for whatever the user's request is."
        inputs:
          team_key: "The team key to get cycles from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of cycle objects with metadata"
        required_inputs:
          - team_key

      - name: getAllLabels
        description: GraphQL-based function to get all labels in a specified Linear team
        inputs:
          team_key: "The team key to get labels from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of label objects with metadata"
        required_inputs:
          - team_key

      - name: getAllStates
        description: GraphQL-based function to get all workflow states in a specified Linear team
        inputs:
          team_key: "The team key to get workflow states from (enum: ENG, OPS, RES, AI, MKT, PRO)"
        outputs: "Array of workflow state objects with metadata"
        required_inputs:
          - team_key

      - name: getAllTeams
        description: GraphQL-based function to get all teams in Linear
        inputs: None
        outputs: "Array of team objects with metadata"
        required_inputs: None

  - category: "FILTER: High-effort functions used to filter and select better results but comes at a cost of more required inputs. Always try to gather as much data as you can before using these functions."
    tools:
      - name: filterIssues
        description: GraphQL-based function to filter Linear issues based on various criteria such as state, priority, assignee, etc.
        inputs:
          team_key: "The team key to filter issues by (enum: ENG, OPS, RES, AI, MKT, PRO)"
          issue_number: "Filter by specific issue number. Note: Issue numbers are only unique within a team, so it's recommended to use with teamKey."
          state: "Filter by issue state (e.g. 'In Progress', 'Todo', 'Done')"
          priority: "Filter by priority level (0.0: None, 1.0: Urgent, 2.0: High, 3.0: Medium, 4.0: Low)"
          estimate: "Filter by estimate points (1-7) hours."
          assignee_name: "Filter by assignee's display name (exact match)"
          assignee_contains: "Filter by assignee names containing this text (case-insensitive)"
          title_contains: "Filter issues where title contains this string"
          description_contains: "Filter issues where description contains this string"
          cycle_number: "Filter by cycle number (numeric identifier)"
          project_id: "Filter by project ID"
          label_name: "Filter by label name"
          first: "Limit the number of issues returned. Determine a reasonable number of this to satisfy the user's request."
          include_description: "Whether to include the description field in the results. Set to False most of the time. Just set the True if users request details about the issue."
        outputs: "Array of matching issues with metadata"
        required_inputs:
          - team_key

      - name: filterComments
        description: GraphQL-based function to filter comments in Linear based on various criteria
        inputs:
          issue_number: "Filter comments by issue number"
          user_display_name: "Filter comments by user display name"
          body_contains: "Filter comments where body contains this text"
        outputs: "Array of matching comments"
        required_inputs:
          - issue_number

      - name: filterProjects
        description: GraphQL-based function to filter projects in Linear based on various criteria
        inputs:
          team_key: "Filter projects by team key (enum: ENG, OPS, RES, AI, MKT, PRO)"
          name: "Exact match for project name"
          name_contains: "Filter projects where name contains this string (case-sensitive)"
          state: "Filter by project state (e.g. 'planned', 'started', 'completed')"
          lead_display_name: "Filter by project lead's display name"
        outputs: "Array of matching project objects"
        required_inputs: []

      - name: semantic_search_linear
        description: "IMPORTANT: Only use this for natural language concept searches (e.g., 'database migration issues' or 'UI improvements'). DO NOT use for finding specific issues by ID, number, or exact name - use filterIssues instead. This function finds Linear content semantically similar to concepts described in natural language, searching across titles and descriptions of issues, projects, and comments."
        inputs:
          limit: "Maximum number of results to return"
          use_reranker: "Whether to apply LLM-based reranking to improve search results"
          candidate_pool_size: "Size of the initial candidate pool for reranking"
          team_key: "Filter results by team key (enum: ENG, OPS, RES, AI, MKT, PRO)"
          object_type: "Filter results by object type (enum: Issue, Project, Comment)"
        outputs: "Array of semantically relevant Linear objects with metadata"
        required_inputs:
          - query

slack_tools:
  - category: "Slack communication tools"
    tools:
      - name: search_channel_history
        description: Search Slack channel history with specific filters to find relevant messages
        inputs:
          channel_id: "The ID of the Slack channel to search (e.g., 'C01234ABCDE')"
          username: "Filter messages by a specific username"
          time_range: "Time unit to look back (enum: hours, days, weeks)"
          time_value: "Number of time units to look back"
          message_count: "Maximum number of messages to retrieve"
        outputs: "Array of matching messages with metadata including content type detection"
        required_inputs:
          - channel_id

      - name: get_users
        description: "Get user information for every employee in the company or a specific employee. By providing their display name, you can get the user's information. Or return all users if no display name is provided."
        inputs:
          display_name: "The display name of the employee to search for (e.g. '@username')"
        outputs: "Array of Slack user objects with metadata"
        required_inputs: []

      - name: get_current_user
        description: Get the current user's information on Slack
        inputs:
          user_id: "The ID of the user to get information for"
        outputs: "User object with metadata"
        required_inputs: []

github_tools:
  - category: "GitHub repository management tools"
    tools:
      - name: list_repositories
        description: Lists repositories the authenticated user has access to
        inputs:
          visibility: "Filter by visibility (enum: all, public, private)"
          sort: "Sort by property (enum: created, updated, pushed, full_name)"
          direction: "Sort direction (enum: asc, desc)"
          per_page: "Number of results per page"
        outputs: "Array of repository objects"
        required_inputs: []

      - name: get_repository_issues
        description: Lists issues for a specific repository
        inputs:
          owner: "Repository owner"
          repo: "Repository name"
          state: "Filter by issue state (enum: open, closed, all)"
          labels: "Comma-separated list of label names"
          sort: "Sort by property (enum: created, updated, comments)"
          direction: "Sort direction (enum: asc, desc)"
          since: "ISO 8601 timestamp to filter by updated date"
        outputs: "Array of issue objects"
        required_inputs:
          - owner
          - repo 